{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,MAAM;EAAGA;AAAc,CAAC,GAAGC,mBAAO,CAAC,0BAAU,CAAC;AAC9C,MAAMC,IAAI,GAAGD,mBAAO,CAAC,kBAAM,CAAC;AAC5B,MAAM;EAAEE,GAAG;EAAEC;AAAQ,CAAC,GAAGH,mBAAO,CAAC,0BAAU,CAAC;AAI5C,MAAMI,YAAY,GAAGA,CAAA,KAAM;EACzB;EACA,MAAMC,UAAU,GAAG,IAAIN,aAAa,CAAC;IACnCO,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,GAAG;IACXC,cAAc,EAAE;MACRC,eAAe,EAAE;IACnB;EACR,CAAC,CAAC;;EAEF;EACAJ,UAAU,CAACK,OAAO,CAAC,uBAAuB,CAAC;;EAE3C;EACAL,UAAU,CAACM,WAAW,CAACC,YAAY,CAAC,CAAC;AACvC,CAAC;;AAMD;AACA;AACA;AACAV,GAAG,CAACW,EAAE,CAAC,OAAO,EAAET,YAAY,CAAC;;AAE7B;AACA;AACA;AACAF,GAAG,CAACW,EAAE,CAAC,mBAAmB,EAAE,MAAM;EAChC,IAAIC,OAAO,CAACC,QAAQ,KAAK,QAAQ,EAAE;IACjCb,GAAG,CAACc,IAAI,CAAC,CAAC;EACZ;AACF,CAAC,CAAC;AAEFd,GAAG,CAACW,EAAE,CAAC,UAAU,EAAE,MAAM;EACvB;EACA;EACA,IAAId,aAAa,CAACkB,aAAa,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9Cd,YAAY,CAAC,uBAAuB,CAAC;EACvC;AACF,CAAC,CAAC;;AAEF;AACA,sE","sources":["webpack://my-app/external node-commonjs \"electron\"","webpack://my-app/external node-commonjs \"path\"","webpack://my-app/webpack/bootstrap","webpack://my-app/./src/main.js"],"sourcesContent":["module.exports = require(\"electron\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const {  BrowserWindow } = require('electron');\nconst path = require('path');\nconst { app, ipcMain } = require('electron');\n\n\n\nconst createWindow = () => {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n            nodeIntegration: true\n          }\n  });\n\n  // and load the index.html of the app.\n  mainWindow.loadURL('http://localhost:3000');\n\n  // Open the DevTools.\n  mainWindow.webContents.openDevTools();\n};\n\n\n\n\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', createWindow);\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow('http://localhost:3000');\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and import them here.\n"],"names":["BrowserWindow","require","path","app","ipcMain","createWindow","mainWindow","width","height","webPreferences","nodeIntegration","loadURL","webContents","openDevTools","on","process","platform","quit","getAllWindows","length"],"sourceRoot":""}